<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo踩坑</title>
    <url>/2020/07/08/hexo%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h2 id="hexo-deploy默认使用的是全局的user-name和user-email"><a href="#hexo-deploy默认使用的是全局的user-name和user-email" class="headerlink" title="hexo deploy默认使用的是全局的user.name和user.email"></a>hexo deploy默认使用的是全局的user.name和user.email</h2><p>如果你全局的git config配的是公司的信息，就得注意了，就算改了当前项目的user信息，它在push的时候也带的是全局的。怎么改呢？<br>可以在_config.yml里面设置，hexo d 的时候会自动push代码到相应的repo  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line">  name: [git user]</span><br><span class="line">  email: [git email]</span><br></pre></td></tr></table></figure>

<h2 id="在-deploy-git目录已经生成的情况下，如果不小心把它删了，原来所有的提交记录全都没有了"><a href="#在-deploy-git目录已经生成的情况下，如果不小心把它删了，原来所有的提交记录全都没有了" class="headerlink" title="在.deploy_git目录已经生成的情况下，如果不小心把它删了，原来所有的提交记录全都没有了"></a>在<code>.deploy_git</code>目录已经生成的情况下，如果不小心把它删了，原来所有的提交记录全都没有了</h2><p>再执行一次<code>hexo d</code> 会生产一个磨默认的”First commit”和你hexo d的那个</p>
<h2 id="提交源码可以拉一个source分支，master用于放hexo生成的文件"><a href="#提交源码可以拉一个source分支，master用于放hexo生成的文件" class="headerlink" title="提交源码可以拉一个source分支，master用于放hexo生成的文件"></a>提交源码可以拉一个source分支，master用于放hexo生成的文件</h2>]]></content>
  </entry>
  <entry>
    <title>vue双向数据绑定原理</title>
    <url>/2020/03/16/vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>核心是利用ES5的Object.defineProperty,这个方法不兼容ie8及以下浏览器，这也是vue为什么不能兼容ie8及以下浏览器的原因。</p>
<ul>
<li>Object.defineProperty方法可以直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象。</li>
<li>observe的功能就是用来监测数据的变化。Observe是一个类，它的作用是给对象属性添加getter和setter，用于依赖收集和派发更新。实现方式是给非VNode的对象类型数据添加一个Observe，如果已经添加的则直接返回，否则在满足一定条件下去实例化一个Observe对象实例。</li>
</ul>
<h2 id="依赖收集-getter（重点关注以下两点）"><a href="#依赖收集-getter（重点关注以下两点）" class="headerlink" title="依赖收集 getter（重点关注以下两点）"></a>依赖收集 getter（重点关注以下两点）</h2><ul>
<li>const dep = new Dep()   //实例化一个Dep实例</li>
<li>在get函数中通过dep.depend做依赖收集</li>
</ul>
<p>Dep是一个class，它定义了一些属性和方法，它有一个静态属性target，这是一个全局唯一的watcher（同一时间内只能有一个全局的watcher被计算）。Dep实际上就是对watcher的一种管理，Dep脱离watcher单独存在是没有意义的。watcher和dep就是典型的观察者设计模式。</p>
<p>watcher是一个class，在它的构造函数中定义了一些和Dep相关的属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.deps &#x3D; []</span><br><span class="line">this.newDeps &#x3D; []</span><br><span class="line">this.depIds &#x3D; new Set()</span><br><span class="line">this.newDepIds &#x3D; new Set()</span><br></pre></td></tr></table></figure>
<h3 id="收集过程"><a href="#收集过程" class="headerlink" title="收集过程"></a>收集过程</h3><p>当我们实例化一个渲染watcher的时候，首先进入watcher的构造函数逻辑，然后执行它的this.get()方法，进入get函数把Dep.target赋值为当前渲染watcher并压线（为了恢复用）。接着执行vm._render()方法，生成渲染函数VNode，并且在这个过程对vm上的数据访问，这个时候就触发数据对象的getter（在此期间执行Dep.target.addDep(this）方法，将watcher订阅到这个数据持有的dep的subs中，为后续数据变化时通知到哪些subs做准备）。然后递归遍历添加所有子项getter。<br>watcher在构造函数中初始化两个Dep实例数组。newDeps代表新添加的Dep实例数组。newDeps代表新添加的Dep实例</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>进程和线程</title>
    <url>/2020/03/15/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>计算机资源 = 存储资源 + 计算资源  test33<br>计算资源：由系统分配，操作系统按照一定的规则来分配什么时候由谁来获得CPU的计算资源（CPU是计算单元，对输入的数据和指令进行计算）<br>存储资源：就是内存，存储资源是操作系统管理和分配</p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>定义：一个程序在一个数据集上的一次运行</p>
<p>进程的三种基本状态：<br>1.就绪状态：除CPU外已分配所有资源，等待获得处理机执行<br>2.执行状态：获得处理机，程序正在执行<br>3.阻塞状态：因等待而无法执行，放弃处理机，处于等待状态。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>定义：进程中的一个实体（进程中一段程序片段）</p>
<h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><ul>
<li><p>内存空间<br>进程的内存空间是独立的，有独立的地址空间，不允许突破进程边界存取其他进程的内存空间；<br>线程共享同一个进程中的内存空间，共享的是进程的代码片段、进程打开的文件描述符、信号的处理器、进程的当前目录和进程用户id与进程组id、进程的公有数据（利用这些共享数据，线程很容易实现相互之间的通信）</p>
</li>
<li><p>隶属关系<br>线程属于进程，进程退出时结束所有线程，线程占用资源少于进程</p>
</li>
<li><p>多个执行<br>两个进程不能同时执行<br>多个线程可以同时执行<br>多线程程序只要有一个线程死掉，整个进程也死掉</p>
</li>
</ul>
<h2 id="进程间的通讯方式"><a href="#进程间的通讯方式" class="headerlink" title="进程间的通讯方式"></a>进程间的通讯方式</h2><p>1.管道：管道是一种半双工的通信方式，数据只能单向流动，速度慢，容量有限，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。<br>2.命名管道FIFO：有名管道也是半双工的通信方式，但是它允许无亲缘关系的进程间的通信。但是速度慢。<br>3.消息队列：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。但是容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题。<br>4.共享内存：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的IPC方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步个通信。<br>5.信号量：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>vue配置反向代理解决跨域</title>
    <url>/2020/03/15/vue%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>浏览器是禁止跨域的，但是服务端不禁止，在本地运行<code>npm run dev</code>等命令时实际上是用node运行了一个服务器，IP与后端不一致，所以会产生跨域问题，需要使用如JSONP、跨域代理等手段进行跨域请求，而vue已经帮我们配置好了，只需要设置一下<code>proxyTable</code>就行。因此<code>proxyTable</code>实际上是将请求发给自己的服务器，再由服务器转发给后台服务器，做了一层代理，因为不会出现跨域问题。</p>
<h2 id="正向代理与反向代理"><a href="#正向代理与反向代理" class="headerlink" title="正向代理与反向代理"></a>正向代理与反向代理</h2><p>正向代理：<br>在客户端和原始服务器(origin server)之间架设一个代理服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/12/28/16f4d151a21d96d8?w=405&h=218&f=jpeg&s=10348" alt=""><br>反向代理：<br>反向代理（Reverse Proxy）方式是指以代理服务器来接受网络上的连接请求，然后将请求转发给内部网络上的服务器，并将服务器上得到的结果返回给请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。客户端无需做任何配置。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/12/28/16f4d159cd179011?w=523&h=271&f=jpeg&s=14059" alt=""></p>
<p>在前后端分离的网站架构中，服务器经常要配置反向代理，使前端通过固定地址访问后端接口，这样后端服务可以采取负载均衡等性能优化措施，对前端应用透明。 </p>
<p>假设前端服务器地址为：<code>http://127.0.0.1:8080</code>，后端实际服务地址为：<code>http://server/web-service/userList</code> ，由于涉及到跨域的问题，前端无法直接发http请求给此地址，只能发送同域下的api请求例如：<code>http://127.0.0.1:8080/api/userList</code>， 通过上文介绍，我们了解到需要在前端服务器上配置反向代理，实现将api请求转发至后台服务器的目的。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>配置：<code>config/index.js</code>中的<code>proxyTable</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dev&#123;</span><br><span class="line">	proxyTable: &#123;</span><br><span class="line">      &#39;&#x2F;api&#39;: &#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;192.168.0.1:200&#39;, &#x2F;&#x2F; 要代理的域名</span><br><span class="line">        changeOrigin: true,&#x2F;&#x2F;允许跨域</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &#39;^&#x2F;api&#39;: &#39;&#39; &#x2F;&#x2F; 这个是定义要访问的路径，名字随便写</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; &#x2F;api&#x2F;getMenu相当于*http:&#x2F;&#x2F;192.168.0.1:200&#x2F;getMenu</span><br><span class="line"> &#x2F;&#x2F; &#x2F;api相当于http:&#x2F;&#x2F;192.168.0.1:200</span><br><span class="line"> this.$http.get(&quot;&#x2F;api&#x2F;getMenu&quot;, &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> .then(res &#x3D;&gt; &#123;</span><br><span class="line"> &#125;)</span><br><span class="line"> .catch(function(error) &#123;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<p>注意：<br>以上面代码设置的为例，会把请求中所有带有/api字段的都替换掉，例如api/getMenu/api，前后两个都会被替换，导致404等错误，在代理数量比较多的时候容易出现这个问题。</p>
<p>以上配置只是在开发环境（dev）中解决跨域。要解决生产环境的跨域问题,则在<code>config/dev.env.js</code>和<code>config/prod.env.js</code>里也就是开发/生产环境下分别配置一下请求的地址<code>API_HOST</code>，开发环境中我们用上面配置的代理地址api，生产环境下用正常的接口地址。配置代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: &#39;&quot;development&quot;&#39;,     &#x2F;&#x2F;开发环境</span><br><span class="line">  API_HOST:&quot;&#x2F;api&#x2F;&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  NODE_ENV: &#39;&quot;production&quot;&#39;,      &#x2F;&#x2F;生产环境</span><br><span class="line">  API_HOST:&#39;&quot;http:&#x2F;&#x2F;40.00.100.100:3002&#x2F;&quot;&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
