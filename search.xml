<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTTPS</title>
    <url>/2020/08/29/HTTPS/</url>
    <content><![CDATA[<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p><strong>为什么要有https？</strong></p>
<p>因为 http 不安全</p>
<p>如何定义“安全”？</p>
<p>如果通信过程具备了四个特性，就可以认为是“安全”的，这四个特性是：机密性、完整性，身份认证和不可否认。</p>
<p><strong>什么是HTTPS</strong></p>
<p>HTTPS = HTTP + SSL/TLS；https让http运行在了安全的SSL/TLS协议上，收发报文不再使用 Socket API，而是调用专门的安全接口。</p>
<p>![image-20200824222951264](/Users/chenyu/Library/Application Support/typora-user-images/image-20200824222951264.png)</p>
<ul>
<li><p>SSL：安全套接层，在 OSI 模型中处于第 5 层（会话层）</p>
</li>
<li><p>TLS：1999年，SSL被改名为TLS（传输层安全），正式标准化，所以 TLS1.0 实际上就是 SSLv3.1，目前应用的最广泛的 TLS 是 1.2。</p>
<p>TLS 由记录协议、握手协议、警告协议、变更密码规范协议、扩展协议等几个子协议组成，综合使用了对称加密、非对称加密、身份认证等许多密码学前沿技术。</p>
<p>浏览器和服务器在使用 TLS 建立连接时需要选择一组恰当的加密算法来实现安全通信，这些算法的组合被称为“密码套件”（cipher suite，也叫加密套件）。</p>
</li>
</ul>
<p>TLS 的密码套件命名：密钥交换算法 + 签名算法 + 对称加密算法 + 摘要算法</p>
<p>如：ECDHE-RSA-AES256-GCM-SHA38</p>
<p>含义：握手时使用 ECDHE 算法进行密钥交换，用 RSA 签名和身份认证，握手后的通信使用AES 对称算法，密钥长度 256 位，分组模式是 GCM，摘要算法 SHA384 用于消息认证和产生随机数</p>
<p><strong>OpenSSL</strong></p>
<p>说到 TLS，就不能不谈到 OpenSSL，它是一个著名的开源密码学程序库和工具包，几乎支持所有公开的加密算法和协议，是 SSL/TLS 的具体实现。</p>
<p><em>HTTPS是怎么实现机密性、完整性，身份认证和不可否认特性的呢？</em></p>
<h2 id="机密性"><a href="#机密性" class="headerlink" title="机密性"></a>机密性</h2><p>为什么要有机密性？</p>
<p>因为http是明文传输的，明文的意思就是头部字段等信息直接使用ASCII码这种人能看懂的符号传递，很容易被劫取和篡改。当我们使用http进行金钱方面的交易时，是毫无安全性可言的。</p>
<p>实现机密性最常用的手段是“加密”（encrypt），就是把消息用某种方式转换成谁也看不懂的乱码，只有掌握特殊“钥匙”的人才能再转换出原始文本。</p>
<p>这里的“钥匙”就叫做“密钥”（key），加密前的消息叫“明文”（plain text/cleartext），加密后的乱码叫“密文”（cipher text），使用密钥还原明文的过程叫“解密”（decrypt），是加密的反操作，加密解密的操作过程就是“加密算法”。</p>
<p>按照密钥的使用方式，加密可以分为两大类：对称加密和非对称加密。</p>
<h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>对称加密：加密和解密时使用的密钥都是同一个，是“对称”的。只要保证了密钥的安全，那整个通信过程就可以说具有了机密性。</p>
<p>举个例子，你想要登录某网站，只要事先和它约定好使用一个对称密码，通信过程中传输的全是用密钥加密后的密文，只有你和网站才能解密。黑客即使能够窃听，看到的也只是乱码，因为没有密钥无法解出明文，所以就实现了机密性。</p>
<p> 目前最常用的加密算法是 AES（高级加密标准），密钥长度可以是128、192 或 256。</p>
<p>对称算法还有一个“分组模式”的概念，它可以让算法用固定长度的密钥加密任意长度的明文，把小秘密（即密钥）转化为大秘密（即密文），常用的是 GCM、CCM 和Poly1305。</p>
<p>把上面这些组合起来，就可以得到 TLS 密码套件中定义的对称加密算法。比如，AES128-GCM，意思是密钥长度为 128 位的 AES 算法，使用的分组模式是 GCM；ChaCha20-Poly1305 意思是ChaCha20 算法，使用的分组模式是 Poly1305。</p>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>对称加密有一个缺点，就是无法解决“密钥交换”问题，因为在对称加密算法中只要持有密钥就可以解密。如果你和网站约定的密钥在传递途中被黑客窃取，那他就可以在之后随意解密收发的数据，通信过程也就没有机密性可言了。</p>
<p>所以，就出现了非对称加密，也叫公钥加密算法。它有两个密钥，一个叫“公钥”（public key），一个叫“私钥”（private key）。两个密钥是不同的，“不对称”，公钥可以公开给任何人使用，而私钥必须严格保密。</p>
<p>公钥和私钥有个特别的“单向”性，虽然都可以用来加密解密，但公钥加密后只能用私钥解密，反过来，私钥加密后也只能用公钥解密。非对称加密可以解决“密钥交换”的问题。网站秘密保管私钥，在网上任意分发公钥，你想要登录网站只要用公钥加密就行了，密文只能由私钥持有者才能解密。而黑客因为没有私钥，所以就无法破解密文。</p>
<img src="/Users/chenyu/Library/Application Support/typora-user-images/image-20200826102824728.png" alt="image-20200826102824728" style="zoom: 33%;" />

<p>RSA是最著名的非对称加密算法，它的安全性基于“整数分解”的数学难题，使用两个超大素数的乘积作为生成密钥的材料，想要从公钥推算出私钥是非常困难的。</p>
<p>ECC（Elliptic Curve Cryptography）是非对称加密里的“后起之秀”，它基于“椭圆曲线离散对数”的数学难题，使用特定的曲线方程和基点生成公钥和私钥，子算法 ECDHE 用于密钥交换，ECDSA 用于数字签名。</p>
<h3 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h3><p>非对称加密虽然没有“密钥交换”问题，但因为它们都是基于复杂的数学难题，运算速度很慢，比对称加密算法差了好几个数量级。如果仅用非对称加密，虽然保证了安全，但通信速度有如乌龟、蜗牛，实用性就变成了零。</p>
<p>所以，TLS里使用了”混合加密“方式：</p>
<ul>
<li>在通信刚开始的时候使用非对称算法，比如 RSA、ECDHE，首先解决密钥交换的问题；【用随机数产生对称算法使用的“会话密钥”（session key），再用公钥加密。因为会话密钥很短，通常只有 16 字节或 32 字节，所以慢一点也无所谓。对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换。】</li>
<li>后续全都使用对称加密进行通信。</li>
</ul>
<h2 id="完整性"><a href="#完整性" class="headerlink" title="完整性"></a>完整性</h2><p>为什么要有完整性？</p>
<p>因为黑客虽然拿不到会话密钥，无法破解密文，但可以通过窃听收集到足够多的密文，再尝试着修改、重组后发给网站。如果没有完整性保证，服务器只能“照单全收”，然后他就可以通过服务器的响应获取进一步的线索，最终就会破解出明文。</p>
<p>实现完整性的手段主要是 摘要算法，也就是常说的散列函数、哈希函数。</p>
<p>你可以把摘要算法近似地理解成一种特殊的压缩算法，它能够把任意长度的数据“压缩”成固定长度、而且独一无二的“摘要”字符串，就好像是给这段数据生成了一个数字“指纹”。也可以把摘要算法理解成特殊的“单向”加密算法，它只有算法，没有密钥，加密后的数据无法解密，不能从摘要逆推出原文。</p>
<p>你一定在日常工作中听过、或者用过 MD5（Message-Digest 5）、SHA-1（SecureHash Algorithm 1），它们就是最常用的两个摘要算法，能够生成 16 字节和 20 字节长度的数字摘要。但这两个算法的安全强度比较低，不够安全，在 TLS 里已经被禁止使用了。</p>
<p>目前 TLS 推荐使用的是 SHA-1 的后继者：SHA-2，SHA-2 实际上是一系列摘要算法的统称，总共有 6 种，常用的有 SHA224、SHA256、SHA384，分别能够生成 28 字节、32 字节、48 字节的摘要</p>
<p><strong>摘要算法保证了“数字摘要”和原文是完全等价的。所以，我们只要在原文后附上它的摘要，就能够保证数据的完整性。</strong></p>
<p>比如，你发了条消息：“转账 1000 元”，然后再加上一个 SHA-2 的摘要。网站收到后也计算一下消息的摘要，把这两份“指纹”做个对比，如果一致，就说明消息是完整可信的，没有被修改。如果黑客在中间哪怕改动了一个标点符号，摘要也会完全不同，网站计算比对就会发现消息被窜改，是不可信的。</p>
<p>![image-20200826105420184](/Users/chenyu/Library/Application Support/typora-user-images/image-20200826105420184.png)</p>
<h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><p>为什么要有身份认证？</p>
<p>因为黑客也可以伪造身份发布公钥。如果你拿到了假的公钥，混合加密就完全失效了。你以为自己是在和“某宝”通信，实际上网线的另一端却是黑客，银行卡号、密码等敏感信息就在“安全”的通信过程中被窃取了。所以，客户端需要确认服务器身份。</p>
<h2 id="TLS连接过程解析"><a href="#TLS连接过程解析" class="headerlink" title="TLS连接过程解析"></a>TLS连接过程解析</h2><p>当你在浏览器地址栏里键入“https”开头的 URI，再按下回车，会发生什么呢？</p>
<p>浏览器首先要从 URI 里提取出协议名和域名。因为协议名是“https”，所以浏览器就知道了端口号是默认的 443，它再用 DNS 解析域名，得到目标的 IP 地址，然后就可以使用三次握手与网站建立 TCP 连接了。</p>
<p>在 HTTP 协议里，建立连接后，浏览器会立即发送请求报文。但现在是 HTTPS 协议，<strong>它需要再用另外一个“握手”过程，在 TCP 上建立安全连接</strong>，之后才是收发 HTTP 报文</p>
<p>开局一张图：</p>
<img src="/Users/chenyu/Library/Application Support/typora-user-images/image-20200827111003908.png" alt="image-20200827111003908" style="zoom:50%;" />

<p>TLS握手过程：</p>
<p><strong>1.客户端发出请求（ClientHello）</strong></p>
<ul>
<li>支持的协议版本，比如TLS 1.0版</li>
<li>一个客户端生成的随机数，稍后用于生成”对话密钥”</li>
<li>支持的密码套件（支持的加密方法）</li>
</ul>
<p>​    <img src="/Users/chenyu/Library/Application Support/typora-user-images/image-20200827102623833.png" alt="image-20200827102623833" style="zoom:50%;" /></p>
<p><strong>2.服务器回应（ServerHello）</strong></p>
<ul>
<li><p>确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。</p>
</li>
<li><p>一个服务器生成的随机数，稍后用于生成”对话密钥”</p>
</li>
<li><p>确认使用的加密方法，比如RSA公钥加密</p>
</li>
<li><p>服务器证书</p>
<img src="/Users/chenyu/Library/Application Support/typora-user-images/image-20200827103003869.png" alt="image-20200827103003869" style="zoom:50%;" />

</li>
</ul>
<p>接下来是一个关键的操作，因为服务器选择了 ECDHE 算法，所以它会在证书后发送“Server Key Exchange”消息，里面是椭圆曲线的公钥（Server Params），用来实现密钥交换算法，再加上自己的私钥签名认证。</p>
<img src="/Users/chenyu/Library/Application Support/typora-user-images/image-20200827103447339.png" alt="image-20200827103447339" style="zoom:50%;" />

<p>之后是“Server Hello Done”消息，服务器说：“我的信息就是这些，打招呼完毕。”</p>
<p>这样第一个消息往返就结束了（两个 TCP 包），结果是客户端和服务器通过明文共享了三个信息：Client Random、Server Random 和 Server Params。</p>
<p><strong>3.客户端回应</strong></p>
<p>客户端收到服务器回应以后，开始走证书链逐级验证，确认证书的真实性，如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信：</p>
<p>![image-20200827102309800](/Users/chenyu/Library/Application Support/typora-user-images/image-20200827102309800.png)</p>
<p>如果证书真实有效，再用证书公钥验证签名，就确认了服务器的身份。</p>
<p>然后，向服务器发送下面三项信息：</p>
<ul>
<li>一个随机数。该随机数用服务器公钥加密，防止被窃听</li>
<li>编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送（Change Cipher Spec）</li>
<li>客户端握手结束通知（Finished），表示客户端的握手阶段已经结束。这一项是把之前所有发送的数据做个摘要（hash值），再加密一下，供服务器校验</li>
</ul>
<p>上面第一项的随机数，是整个握手阶段出现的第三个随机数，又称”pre-master key”。有了它以后，客户端和服务器就同时有了三个随机数，接着双方就用事先商定的加密方法，各自生成本次会话所用的同一把”会话密钥”。</p>
<p>为什么一定要用三个随机数，来生成”会话密钥”？</p>
<p><strong>4.服务器的最后回应</strong></p>
<p>服务器收到客户端的第三个随机数pre-master key之后，计算生成本次会话所用的”会话密钥”。</p>
<p>然后，向客户端最后发送下面信息：</p>
<ul>
<li>编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送（Change Cipher Spec）</li>
<li>客户端握手结束通知（Finished），表示客户端的握手阶段已经结束。这一项是把之前所有发送的数据做个摘要（hash值），再加密一下，供服务器校验</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>nodejs相关框架对比</title>
    <url>/2020/07/20/nodejs%E7%9B%B8%E5%85%B3%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>nodejs提供了构建http服务的特性，但在日常开发中使用起来并不是很方便，于是框架便兴起了，express比较早出现，它以极简的风格大受开发者们的喜爱，可以帮助我们快速搭建应用模型，简单高效的api使用起来也很方便，后来开发express的原班人马基于 ES6 新特性又发布了koa，它可以说是express的升级版，比express更加轻量，灵活，并且，它提供async/await的写法来代替回调，这对错误处理非常友好，不像之前在每层回调函数里都得写一遍，因此大受开发者欢迎。</p>
<p>下面分别从异步流程控制，中间件（路由、视图），http request 几个主要不同点阐述express和koa的区别</p>
<h1 id="异步流程控制"><a href="#异步流程控制" class="headerlink" title="异步流程控制"></a>异步流程控制</h1><p>Express 采用 callback 来处理异步，Koa2 采用 async/await。<br>express中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>koa中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>错误处理</p>
<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h1 id="http-request"><a href="#http-request" class="headerlink" title="http request"></a>http request</h1><h1 id="express"><a href="#express" class="headerlink" title="express"></a>express</h1><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol>
<li>初始化<br><code>const app = express()</code></li>
<li>路由作为内置中间件<br><code>const router = express.Router()</code></li>
<li>路由中间件挂载<br>app.use(‘/‘, router)</li>
</ol>
<h1 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h1><h2 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h2><ol>
<li>初始化<br><code>const app = new koa()</code></li>
<li>路由作为外部中间件 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Router &#x3D; require(&#39;koa-router&#39;)</span><br><span class="line">const router &#x3D; Router()</span><br></pre></td></tr></table></figure></li>
<li>路由中间件挂载<br>app.use(router.routes())</li>
</ol>
<h1 id="egg"><a href="#egg" class="headerlink" title="egg"></a>egg</h1>]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs概述</title>
    <url>/2020/07/08/nodejs%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="什么是nodejs"><a href="#什么是nodejs" class="headerlink" title="什么是nodejs"></a>什么是nodejs</h1><p>nodejs是一个构建于chrome v8引擎之上的一个JavaScript运行时环境，在node出现之前，JavaScript只能运行在浏览器端，因为它需要js引擎去编译执行，而js引擎都是各大浏览器厂商提供的；node将chrome的v8引擎移植出来，作为node的运行时环境，使得JavaScript可以运行在浏览器之外。<br>那么，nodejs和chrome有什么区别呢？<br>虽然他们都可以解析JavaScript代码，但chrome是浏览器环境，nodejs是服务端环境，所以他们提供的全局api会有所不同，比如alert，document，location，history这些api只在浏览器环境存在，而node中特有api有：path，fs，http等，并且在服务端也不用操作dom，处理浏览器兼容性。<br>node并不是对v8做了简单的封装，提供一些api调用就完了，它还针对性的做了一些优化，比如在服务端处理二进制数据通常是必不可少的，但JavaScript没有二进制数据类型，因此node增加了buffer类，方便高效地处理二进制数据。</p>
<h1 id="nodejs可以用来做什么"><a href="#nodejs可以用来做什么" class="headerlink" title="nodejs可以用来做什么"></a>nodejs可以用来做什么</h1><ol>
<li>搭建前端开发环境 </li>
</ol>
<ul>
<li>npm init 初始化package.json </li>
<li>webpack基于node</li>
</ul>
<ol start="2">
<li>网站服务器</li>
<li>cli程序 如hexo</li>
</ol>
<h1 id="node提供的功能"><a href="#node提供的功能" class="headerlink" title="node提供的功能"></a>node提供的功能</h1><h2 id="构建web应用"><a href="#构建web应用" class="headerlink" title="构建web应用"></a>构建web应用</h2><p>node无需额外的容器，即可轻松构建服务器，node提供了net、dgram、http、https模块分别用于构建TCP、UDP、HTTP、HTTS服务，包括服务端和客户端。</p>
<h2 id="读写文件系统"><a href="#读写文件系统" class="headerlink" title="读写文件系统"></a>读写文件系统</h2><h2 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h2><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>JavaScript是运行在单进程的单线程上的，这可以说是一把双刃剑，好处是程序状态是单一的，没有多线程的锁、线程同步等问题，并且操作系统在调度时也因为较少上下文的切换，可以很好地提高CPU的使用率。坏处是无法充分利用多核CPU的能力，并且单线程无法保证进程的健壮性和稳定性，一旦有异常没有被捕获，将导致整个进程异常退出。<br>为了解决上面的问题，node提供了child_process模块来创建子进程，并且父子进程之间可以通过message事件和send方法进行通信</p>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>为什么我们要学习内存管理？在nodejs出现之前，JavaScript大多数场景运行在网页应用上，它的执行时间较短，且运行在用户的机器上，即使内存使用过多或内存泄漏，也只会影响到终端用户，一般如果页面卡顿用户也会不耐烦的刷新页面，随着进程的退出，内存也会释放，几乎没有内存管理的必要。但node应用在服务端，就要长时间面对海量的请求，js开发者就需要考虑一些平常不会形成影响的问题，比如说如果一个请求形成1kb的内存泄漏，那么在高并发的情况下，内存很快就会爆仓，学习内存的管理和控制是必不可少的。在服务端，资源向来是寸土寸金，所以我们要使一切资源都高效循环利用。</p>
<h3 id="内存限制"><a href="#内存限制" class="headerlink" title="内存限制"></a>内存限制</h3><p>node是基于v8构建的，所以node中的js对象是通过v8来分配和管理的，在v8中，所有的JavaScript对象都是通过堆来进行分配的，当我们在代码中声明变量并赋值时，所使用对象的内存就分配在堆中，如果已申请的堆空闲内存不够分配新的对象，将继续申请堆内存，直到堆的大小超过v8的限制，引起进程出错。<br>v8对js使用内存的限制（64位系统下约为1.4 GB，32位系统下约为0.7 GB），导致我们在node中也受到了限制，无法直接操作大内存对象，但是可以通过其他手段规避这个限制，比如使用 –max-old-space-size在初始化时（不能在进程中动态调整）改变内存大小，或者使用buffer、stream等。<br>v8为什么要限制内存呢？<br>一是因为v8最初是为浏览器而设计，对于网页来说（每个标签页就是一个v8实例），v8的限制值已经绰绰有余。更深层的原因是因为v8的垃圾回收机制的限制，如果内存太大，做一次垃圾回收的时间会很久（达到几秒），垃圾回收会引起JavaScript线程暂停执行，在这样的时间花销下，应用的性能和响应能力都直线下降，不管是前端和服务端都无法接受。因此，在当时的考虑下限制堆内存是一个好的选择。</p>
<h3 id="v8垃圾回收机制"><a href="#v8垃圾回收机制" class="headerlink" title="v8垃圾回收机制"></a>v8垃圾回收机制</h3><p>v8的垃圾回收主要基于分代式垃圾回收机制，即按对象的存活时间将内存分为新生代和老生代，然后分别对不同分代的内存实施适合它的回收算法。新生代中是存活数量较少且存活时间较短的对象，老生代中是存活数量较多且存活时间较长或常驻内存的对象；  </p>
<p>新生代中的对象主要通过Scavenge算法进行垃圾回收，Scavenge算法将内存空间分为两部分，处于使用状态的空间称为from空间，处于闲置状态的空间称为to空间，当我们分配对象时，使用的是from空间，当开始进行垃圾回收时，先检查from空间中的存活对象，然后把他们复制到to空间中，然后清空from空间，完成复制后，from空间和to空间中的角色对换。当一个对象被复制多次依然存活时，会被晋升到老生代中，使用新的回收算法进行管理。<br>Scavenge算法的缺点是只能使用堆内存的一半，优点是只复制存活对象，并且在新生代中，对象生命周期短且存活对象只占少部分，所以在时间上很有优势。Scavenge是典型的以空间换时间，不能大规模的应用到所有垃圾回收中，但它非常适合新生代。  </p>
<p>老生代中使用Mark-Sweep和Mark-Compact相结合的方式进行垃圾回收，Mark-sweep就是我们耳熟能详的标记清除，它分为标记和清除两个阶段，在标记阶段遍历堆中所有的对象，并标记活着的对象，在随后的清除阶段，只清除没有被标记的对象。在进行完一次清除后，由于对象位置不动，内存空间会出现不连续的现象，这时如果要分配一个大对象的话，所有碎片空间都无法满足此次分配，就会提前触发垃圾回收，而这次回收是不必要的。为了解决这个问题，Mark-Compact（标记整理）被提了出来，它在对象被标记为死亡后，在整理的过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存（包括死亡对象和存活对象移动后留下的空洞）。<br>由于Mark-Compact需要移动对象，所以它的执行速度肯定不如标记清除，所以在取舍上，V8主要使用Mark-Sweep，在空间不足以对从新生代中晋升过来的对象进行分配时才使用Mark-Compact。</p>
<p>Scavenge和Mark-Sweep的区别：</p>
<ol>
<li>Scavenge会移动对象的位置，Mark-Sweep清除时，对象位置不变</li>
<li>Scavenge中只复制活着的对象，而Mark-Sweep只清理死亡对象。（活对象在新生代中只占较小部分，死对象在老生代中只占较小部分，这是两种回收方式能高效处理的原因）</li>
</ol>
<p>不会被回收的情况</p>
<h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>内存泄漏的本质：应当回收的对象出现意外而没有被回收，变成了常驻在老生代中的对象。<br>造成内存泄漏的常见原因：</p>
<ol>
<li><p>将内存当缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var cache &#x3D; &#123;&#125;; </span><br><span class="line">var get &#x3D; function (key) &#123; </span><br><span class="line"> if (cache[key]) &#123; </span><br><span class="line"> return cache[key]; </span><br><span class="line"> &#125; else &#123; </span><br><span class="line"> &#x2F;&#x2F; get from otherwise </span><br><span class="line"> &#125; </span><br><span class="line">&#125;; </span><br><span class="line">var set &#x3D; function (key, value) &#123; </span><br><span class="line"> cache[key] &#x3D; value; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>JavaScript开发者通常喜欢用对象的键值对来缓存东西，这种缓存以内存空间换CPU执行时间，如果限定缓存对象的大小，防止内存无限制的增长，还是可以一用的。<br>但这与严格意义上的缓存又有着区别，严格意义的缓存有着完善的过期策略，而普通对象的键值对并没有。<br>如果需要使用大量缓存，目前比较好的解决方案是采用进程外的缓存，进程自身不存储状态，外部的缓存软件有着良好的缓存过期淘汰策略以及自有的内存管理，不影响Node进程的性能，而且进程之间可以共享缓存。目前，市面上较好的缓存有Redis和Memcached。</p>
</li>
<li><p>异步队列事件堆积<br>队列在消费者生产者模型中经常充当中间产物。这是一个容易忽略的情况，因为在大多数应用场景下，消费的速度远远大于生产的速度，内存泄漏不易产生。但是如果生产速度因为某些原因突然激增，或者消费速度因为突然的系统故障降低，使消费速度低于生产速度，将会形成堆积，造成内存泄漏。<br>解决方案应该是监控队列的长度，一旦堆积，应当通过监控系统产生报警并通知相关人员。另一个解决方案是任意异步调用都应该包含超时机制，一旦在限定的时间内未完成响应，通过回调函数传递超时异常，使得任意异步调用的回调都具备可控的响应时间，给消费速度一个下限值。</p>
</li>
<li><p>全局变量引用</p>
</li>
<li><p>闭包<br>闭包会返回一个具有父级函数作用域的中间函数，一旦有变量引用这个中间函数，这个中间函数将不会释放，同时也会使原始的作用域得不到释放，作用域中产生的内存也就不能释放，除非不再引用，才会逐步释放。</p>
</li>
</ol>
<p>由于v8的内存限制，要十分小心此类无法立即回收的变量引用是否无限制的增加，因为它会导致老生代中的对象增多。</p>
<h3 id="排查方案"><a href="#排查方案" class="headerlink" title="排查方案"></a>排查方案</h3><ol>
<li>查看垃圾回收日志<br>在启动时添加–trace_gc参数</li>
<li>查看进程的内存占用<br>调用process.memoryUsage()，其输出的heapUsed表示目前堆中使用中的内存量</li>
<li>使用node-heapdump，它允许对V8堆内存抓取快照，用于事后分析</li>
</ol>
<h1 id="node的特性"><a href="#node的特性" class="headerlink" title="node的特性"></a>node的特性</h1><h2 id="模块机制"><a href="#模块机制" class="headerlink" title="模块机制"></a>模块机制</h2><h2 id="事件驱动，异步I-O"><a href="#事件驱动，异步I-O" class="headerlink" title="事件驱动，异步I/O"></a>事件驱动，异步I/O</h2><p>传统的服务端语言在处理高并发时通常采用多进程和多线程的方式，线程是系统并行处理多任务所使用的方式，每一个发给服务器的请求都会开启一个新的线程，而每个线程会获取它运行代码所需要的一切。但这会带来一个副作用，当请求数达到一定数量时，过多的线程会耗尽系统内存和资源。而node采用单线程和事件循环来处理并发任务，避免了内存浪费，同时还能以极快的速度处理大量并发任务。<br>什么是事件循环？node是一个单线程事件驱动的运行环境，也就是说，在node里，任何事都是对事件的响应。事件循环就是等待一个事件然后在需要事件发生时去触发他们的程序。node不需要为每一个请求开启一个新的线程，它会接收所有请求，然后将大部分任务委托给其他系统。libuv就是一个依赖于OS内核去高效处理这些任务的库，当这些隐藏于幕后的工作者处理完委托给他们的事情后，它们会触发绑定在这些事件上的回调函数去通知nodejs。</p>
<p>其他语言为什么不用node的方式处理高并发？<br>首先，node并不是完美无瑕的，它不适合处理CPU密集型操作，而多线程正擅长于此。<br>再者，因为他们的底层是同步I/O，比如现在需要读取文件并将该文件返回给浏览器，服务器首先通知文件系统去读取指定文件并返回它的内容，发出通知后会一直等待它完成读取文件的操作，而不是转头去处理其他任务，这种方式很显然会造成阻塞的情况，如果使用单线程，所有请求就得排队执行，等待的时间是让人无法忍受的。所以只能用多线程多进程解决并发任务。</p>
<h1 id="node的优势和缺点"><a href="#node的优势和缺点" class="headerlink" title="node的优势和缺点"></a>node的优势和缺点</h1><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol>
<li>高并发性能好 </li>
<li>npm社区活跃 包多</li>
<li>语言统一</li>
<li>占用内存低</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>node并不是所有项目的最佳解决方案，它不适合CPU密集型操作的应用，因为js是单线程的，当你的js代码中有大量计算逻辑，会造成线程阻塞，而多线程系统就比较擅长处理CPU密集型操作，每一个请求都会被一个新的线程处理，那么主线程就可以被解放出来去处理一些更重要的事情。  </p>
<ol start="0">
<li>不适合 CPU 密集型的应用，如视频编解码</li>
<li>debug比别的语言困难</li>
<li>逻辑复杂时callback过多</li>
<li>异常处理</li>
<li>可靠性</li>
</ol>
]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo踩坑</title>
    <url>/2020/07/08/hexo%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h2 id="hexo-deploy默认使用的是全局的user-name和user-email"><a href="#hexo-deploy默认使用的是全局的user-name和user-email" class="headerlink" title="hexo deploy默认使用的是全局的user.name和user.email"></a>hexo deploy默认使用的是全局的user.name和user.email</h2><p>如果你全局的git config配的是公司的信息，就得注意了，就算改了当前项目的user信息，它在push的时候也带的是全局的。怎么改呢？<br>可以在_config.yml里面设置，hexo d 的时候会自动push代码到相应的repo  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line">  name: [git user]</span><br><span class="line">  email: [git email]</span><br></pre></td></tr></table></figure>

<h2 id="在-deploy-git目录已经生成的情况下，如果不小心把它删了，原来所有的提交记录全都没有了"><a href="#在-deploy-git目录已经生成的情况下，如果不小心把它删了，原来所有的提交记录全都没有了" class="headerlink" title="在.deploy_git目录已经生成的情况下，如果不小心把它删了，原来所有的提交记录全都没有了"></a>在<code>.deploy_git</code>目录已经生成的情况下，如果不小心把它删了，原来所有的提交记录全都没有了</h2><p>再执行一次<code>hexo d</code> 会生产一个磨默认的”First commit”和你hexo d的那个</p>
<h2 id="提交源码可以拉一个source分支，master用于放hexo生成的文件"><a href="#提交源码可以拉一个source分支，master用于放hexo生成的文件" class="headerlink" title="提交源码可以拉一个source分支，master用于放hexo生成的文件"></a>提交源码可以拉一个source分支，master用于放hexo生成的文件</h2>]]></content>
  </entry>
  <entry>
    <title>vue双向数据绑定原理</title>
    <url>/2020/03/16/vue%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>核心是利用ES5的Object.defineProperty,这个方法不兼容ie8及以下浏览器，这也是vue为什么不能兼容ie8及以下浏览器的原因。</p>
<ul>
<li>Object.defineProperty方法可以直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象。</li>
<li>observe的功能就是用来监测数据的变化。Observe是一个类，它的作用是给对象属性添加getter和setter，用于依赖收集和派发更新。实现方式是给非VNode的对象类型数据添加一个Observe，如果已经添加的则直接返回，否则在满足一定条件下去实例化一个Observe对象实例。</li>
</ul>
<h2 id="依赖收集-getter（重点关注以下两点）"><a href="#依赖收集-getter（重点关注以下两点）" class="headerlink" title="依赖收集 getter（重点关注以下两点）"></a>依赖收集 getter（重点关注以下两点）</h2><ul>
<li>const dep = new Dep()   //实例化一个Dep实例</li>
<li>在get函数中通过dep.depend做依赖收集</li>
</ul>
<p>Dep是一个class，它定义了一些属性和方法，它有一个静态属性target，这是一个全局唯一的watcher（同一时间内只能有一个全局的watcher被计算）。Dep实际上就是对watcher的一种管理，Dep脱离watcher单独存在是没有意义的。watcher和dep就是典型的观察者设计模式。</p>
<p>watcher是一个class，在它的构造函数中定义了一些和Dep相关的属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.deps &#x3D; []</span><br><span class="line">this.newDeps &#x3D; []</span><br><span class="line">this.depIds &#x3D; new Set()</span><br><span class="line">this.newDepIds &#x3D; new Set()</span><br></pre></td></tr></table></figure>
<h3 id="收集过程"><a href="#收集过程" class="headerlink" title="收集过程"></a>收集过程</h3><p>当我们实例化一个渲染watcher的时候，首先进入watcher的构造函数逻辑，然后执行它的this.get()方法，进入get函数把Dep.target赋值为当前渲染watcher并压线（为了恢复用）。接着执行vm._render()方法，生成渲染函数VNode，并且在这个过程对vm上的数据访问，这个时候就触发数据对象的getter（在此期间执行Dep.target.addDep(this）方法，将watcher订阅到这个数据持有的dep的subs中，为后续数据变化时通知到哪些subs做准备）。然后递归遍历添加所有子项getter。<br>watcher在构造函数中初始化两个Dep实例数组。newDeps代表新添加的Dep实例数组。newDeps代表新添加的Dep实例</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>进程和线程</title>
    <url>/2020/03/15/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>计算机资源 = 存储资源 + 计算资源  test33<br>计算资源：由系统分配，操作系统按照一定的规则来分配什么时候由谁来获得CPU的计算资源（CPU是计算单元，对输入的数据和指令进行计算）<br>存储资源：就是内存，存储资源是操作系统管理和分配</p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>定义：一个程序在一个数据集上的一次运行</p>
<p>进程的三种基本状态：<br>1.就绪状态：除CPU外已分配所有资源，等待获得处理机执行<br>2.执行状态：获得处理机，程序正在执行<br>3.阻塞状态：因等待而无法执行，放弃处理机，处于等待状态。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>定义：进程中的一个实体（进程中一段程序片段）</p>
<h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><ul>
<li><p>内存空间<br>进程的内存空间是独立的，有独立的地址空间，不允许突破进程边界存取其他进程的内存空间；<br>线程共享同一个进程中的内存空间，共享的是进程的代码片段、进程打开的文件描述符、信号的处理器、进程的当前目录和进程用户id与进程组id、进程的公有数据（利用这些共享数据，线程很容易实现相互之间的通信）</p>
</li>
<li><p>隶属关系<br>线程属于进程，进程退出时结束所有线程，线程占用资源少于进程</p>
</li>
<li><p>多个执行<br>两个进程不能同时执行<br>多个线程可以同时执行<br>多线程程序只要有一个线程死掉，整个进程也死掉</p>
</li>
</ul>
<h2 id="进程间的通讯方式"><a href="#进程间的通讯方式" class="headerlink" title="进程间的通讯方式"></a>进程间的通讯方式</h2><p>1.管道：管道是一种半双工的通信方式，数据只能单向流动，速度慢，容量有限，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。<br>2.命名管道FIFO：有名管道也是半双工的通信方式，但是它允许无亲缘关系的进程间的通信。但是速度慢。<br>3.消息队列：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。但是容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题。<br>4.共享内存：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的IPC方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步个通信。<br>5.信号量：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>vue配置反向代理解决跨域</title>
    <url>/2020/03/15/vue%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>浏览器是禁止跨域的，但是服务端不禁止，在本地运行<code>npm run dev</code>等命令时实际上是用node运行了一个服务器，IP与后端不一致，所以会产生跨域问题，需要使用如JSONP、跨域代理等手段进行跨域请求，而vue已经帮我们配置好了，只需要设置一下<code>proxyTable</code>就行。因此<code>proxyTable</code>实际上是将请求发给自己的服务器，再由服务器转发给后台服务器，做了一层代理，因为不会出现跨域问题。</p>
<h2 id="正向代理与反向代理"><a href="#正向代理与反向代理" class="headerlink" title="正向代理与反向代理"></a>正向代理与反向代理</h2><p>正向代理：<br>在客户端和原始服务器(origin server)之间架设一个代理服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/12/28/16f4d151a21d96d8?w=405&h=218&f=jpeg&s=10348" alt=""><br>反向代理：<br>反向代理（Reverse Proxy）方式是指以代理服务器来接受网络上的连接请求，然后将请求转发给内部网络上的服务器，并将服务器上得到的结果返回给请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。客户端无需做任何配置。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/12/28/16f4d159cd179011?w=523&h=271&f=jpeg&s=14059" alt=""></p>
<p>在前后端分离的网站架构中，服务器经常要配置反向代理，使前端通过固定地址访问后端接口，这样后端服务可以采取负载均衡等性能优化措施，对前端应用透明。 </p>
<p>假设前端服务器地址为：<code>http://127.0.0.1:8080</code>，后端实际服务地址为：<code>http://server/web-service/userList</code> ，由于涉及到跨域的问题，前端无法直接发http请求给此地址，只能发送同域下的api请求例如：<code>http://127.0.0.1:8080/api/userList</code>， 通过上文介绍，我们了解到需要在前端服务器上配置反向代理，实现将api请求转发至后台服务器的目的。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>配置：<code>config/index.js</code>中的<code>proxyTable</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dev&#123;</span><br><span class="line">	proxyTable: &#123;</span><br><span class="line">      &#39;&#x2F;api&#39;: &#123;</span><br><span class="line">        target: &#39;http:&#x2F;&#x2F;192.168.0.1:200&#39;, &#x2F;&#x2F; 要代理的域名</span><br><span class="line">        changeOrigin: true,&#x2F;&#x2F;允许跨域</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &#39;^&#x2F;api&#39;: &#39;&#39; &#x2F;&#x2F; 这个是定义要访问的路径，名字随便写</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; &#x2F;api&#x2F;getMenu相当于*http:&#x2F;&#x2F;192.168.0.1:200&#x2F;getMenu</span><br><span class="line"> &#x2F;&#x2F; &#x2F;api相当于http:&#x2F;&#x2F;192.168.0.1:200</span><br><span class="line"> this.$http.get(&quot;&#x2F;api&#x2F;getMenu&quot;, &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> .then(res &#x3D;&gt; &#123;</span><br><span class="line"> &#125;)</span><br><span class="line"> .catch(function(error) &#123;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<p>注意：<br>以上面代码设置的为例，会把请求中所有带有/api字段的都替换掉，例如api/getMenu/api，前后两个都会被替换，导致404等错误，在代理数量比较多的时候容易出现这个问题。</p>
<p>以上配置只是在开发环境（dev）中解决跨域。要解决生产环境的跨域问题,则在<code>config/dev.env.js</code>和<code>config/prod.env.js</code>里也就是开发/生产环境下分别配置一下请求的地址<code>API_HOST</code>，开发环境中我们用上面配置的代理地址api，生产环境下用正常的接口地址。配置代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: &#39;&quot;development&quot;&#39;,     &#x2F;&#x2F;开发环境</span><br><span class="line">  API_HOST:&quot;&#x2F;api&#x2F;&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  NODE_ENV: &#39;&quot;production&quot;&#39;,      &#x2F;&#x2F;生产环境</span><br><span class="line">  API_HOST:&#39;&quot;http:&#x2F;&#x2F;40.00.100.100:3002&#x2F;&quot;&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
